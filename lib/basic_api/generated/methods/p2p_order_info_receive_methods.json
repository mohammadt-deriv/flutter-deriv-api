{
  "methods": "\n  static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets order with parameters specified in [P2pOrderInfoRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderInfoResponse> fetchOrder(\n      P2pOrderInfoRequest request) async {\n    final P2pOrderInfoReceive response = await fetchOrderRaw(request);\n\n    return P2pOrderInfoResponse.fromJson(\n        response.p2pOrderInfo, response.subscription);\n  }\n\n  /// Gets order with parameters specified in [P2pOrderInfoRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderInfoReceive> fetchOrderRaw(\n      P2pOrderInfoRequest request) async {\n    final P2pOrderInfoReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return response;\n  }\n\n  /// Subscribes to this order\n  static Stream<P2pOrderInfoResponse?> subscribe({\n    required String? orderId,\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      subscribeOrder(\n        P2pOrderInfoRequest(id: orderId),\n        comparePredicate: comparePredicate,\n      );\n\n  /// Subscribes to this order\n  static Stream<P2pOrderInfoReceive?> subscribeRaw({\n    required String? orderId,\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      subscribeOrderRaw(\n        P2pOrderInfoRequest(id: orderId),\n        comparePredicate: comparePredicate,\n      );\n\n  /// Subscribes to order with parameters specified in [P2pOrderInfoRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Stream<P2pOrderInfoResponse?> subscribeOrder(\n    P2pOrderInfoRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      subscribeOrderRaw(\n        request,\n        comparePredicate: comparePredicate,\n      ).map(\n        (P2pOrderInfoReceive? response) => response != null\n            ? P2pOrderInfoResponse.fromJson(\n                response.p2pOrderInfo,\n                response.subscription,\n              )\n            : null,\n      );\n\n  /// Subscribes to order with parameters specified in [P2pOrderInfoRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Stream<P2pOrderInfoReceive?> subscribeOrderRaw(\n    P2pOrderInfoRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)!\n          .map<P2pOrderInfoReceive?>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                P2POrderException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is P2pOrderInfoReceive ? response : null;\n        },\n      );\n\n  /// Unsubscribes from order subscription.\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<ForgetResponse?> unsubscribeOrder(String subscriptionId) async {\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscriptionId);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all order subscriptions (Subscriptions to a single order or list).\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllOrder() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.p2pOrder);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }\n\n  /// Cancels this order\n  ///\n  /// Returns an order with updated status if successful.\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderCancelResponse> cancel({\n    required String? orderId,\n  }) async {\n    final P2pOrderCancelReceive response = await cancelRaw(orderId: orderId);\n    return P2pOrderCancelResponse.fromJson(response.p2pOrderCancel);\n  }\n\n  /// Cancels this order\n  ///\n  /// Returns an order with updated status if successful.\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderCancelReceive> cancelRaw({\n    required String? orderId,\n  }) async {\n    final P2pOrderCancelReceive response =\n        await _api.call(request: P2pOrderCancelRequest(id: orderId));\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return response;\n  }\n\n  /// Confirms this order\n  ///\n  /// Returns an order with updated status if successful.\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderConfirmResponse> confirm({\n    required String? orderId,\n  }) async {\n    final P2pOrderConfirmReceive response = await confirmRaw(orderId: orderId);\n\n    return P2pOrderConfirmResponse.fromJson(response.p2pOrderConfirm);\n  }\n\n  /// Confirms this order\n  ///\n  /// Returns an order with updated status if successful.\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<P2pOrderConfirmReceive> confirmRaw({\n    required String? orderId,\n  }) async {\n    final P2pOrderConfirmReceive response =\n        await _api.call(request: P2pOrderConfirmRequest(id: orderId));\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return response;\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/models/enums.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/p2p_order_cancel_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/p2p_order_confirm_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_all_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_cancel_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_cancel_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_confirm_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_confirm_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_info_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_info_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
